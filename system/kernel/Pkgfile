version=3.17.3
PKGMK_IGNORE_UNPACK="yes"
PKGMK_NO_STRIP="yes"
REALTEK_VERSION=8.038.00
VB_VERSION=4.3.18
VB_BUILD=96516
NVIDIA_VERSION=343.22

[ "`uname -m`" == "i686"   ] && VB_ARCH=x86
[ "`uname -m`" == "x86_64"   ] && VB_ARCH=amd64
[ "`uname -m`" == "i686"   ] && _ARCH=x86
[ "`uname -m`" == "x86_64"   ] && _ARCH=x86_64

[ "`uname -m`" == "i686"   ] && _pkg="NVIDIA-Linux-x86-${NVIDIA_VERSION}"
[ "`uname -m`" == "x86_64" ] && _pkg="NVIDIA-Linux-x86_64-${NVIDIA_VERSION}-no-compat32"


source=(http://www.kernel.org/pub/linux/kernel/v3.x/linux-${version}.tar.xz kernel.config kernel.config_64
	http://download.virtualbox.org/virtualbox/${VB_VERSION}/VirtualBox-${VB_VERSION}-${VB_BUILD}-Linux_${VB_ARCH}.run
	ftp://download.nvidia.com/XFree86/Linux-${_ARCH}/$NVIDIA_VERSION/${_pkg}.run
	http://downloads.nutyx.org/files/patchs/$name/delayed_work_ethtool_ops_fix2.patch
	http://r8168dl.appspot.com/files/r8168-$REALTEK_VERSION.tar.bz2)

_version=$version

build(){

bsdtar -p -o -C $SRC -xf r8168-$REALTEK_VERSION.tar.bz2

if [ -d /usr/src/linux-${_version} ]; then
	ln -s  /usr/src/linux-${_version} linux-${_version}
	if [ -f $SRC/patch-$version.bz2 ]; then
		cd linux-${_version}
		bzip2 -d -c  $SRC/patch-$version.bz2 | patch -Np1
		cd $SRC 
	fi
else

	bsdtar -p -o -C $SRC -xf linux-${version}.tar.xz
fi

cd linux-${_version}

if ! [ -d /usr/src/linux-${_version} ]; then
	make mrproper
	case `uname -m` in
        	x86_64)
        		cp $SRC/kernel.config_64 ./.config;;
        	i?86)
        		cp $SRC/kernel.config ./.config;;
	esac

make menuconfig
fi
make || make -j1

case `uname -m` in
        x86_64)
                cp .config $SRC/kernel.config_64;;
        i?86)
                cp .config $SRC/kernel.config;;
esac
# Module realtek
cd $SRC
# Fix build with Linux 3.16
# https://code.google.com/p/r8168/issues/detail?id=19
cd r8168-${REALTEK_VERSION}
patch -Np1 -i $SRC/delayed_work_ethtool_ops_fix2.patch
cd src
make -C $SRC/linux-${_version} SUBDIRS="`pwd`" \
EXTRA_CFLAGS="-DCONFIG_R8168_NAPI -DCONFIG_R8168_VLAN" \
modules
install -m 0644 -D r8168.ko \
$PKG/lib/modules/${version}/kernel/drivers/net/ethernet/realtek/r8168.ko

# Module VB
cd $SRC
sh VirtualBox-${VB_VERSION}-${VB_BUILD}-Linux_${VB_ARCH}.run --target vb --keep --noexec
cd vb
tar xfj VirtualBox.tar.bz2
cd src/vboxhost/
KERNELRELEASE=${version} KERN_DIR=$SRC/linux-${_version} make
for i in *.ko
do
	install -D -m0644 $i \
	$PKG/lib/modules/${version}/kernel/drivers/zzzz/$i
done

# Module nvidia
cd $SRC
sh ${_pkg}.run --extract-only
cd ${_pkg}
cd kernel
SYSSRC=$SRC/linux-${_version} make module
install -m 0644 -D nvidia.ko $PKG/lib/modules/${version}/kernel/drivers/zzzz/nvidia.ko
cd uvm
SYSSRC=$SRC/linux-${_version} make module
install -m 0644 -D nvidia-uvm.ko $PKG/lib/modules/${version}/kernel/drivers/zzzz/nvidia-uvm.ko


# Install modules
cd $SRC/linux-${version}
sed -i "/rm\ -rf\ \$(MODLIB)\/kernel/d" Makefile
make INSTALL_MOD_PATH=$PKG modules_install || make -j1 INSTALL_MOD_PATH=$PKG modules_install
mkdir -p $PKG/boot
case `uname -m` in
        x86_64)
                cp  System.map \
                $PKG/boot/System_64.map-$version
                cp  .config    \
                $PKG/boot/config_64-$version
                cp  arch/x86_64/boot/bzImage \
                $PKG/boot/kernel-$version ;;
        i?86)
                cp  System.map \
                $PKG/boot/System.map-$version
                cp  .config \
                $PKG/boot/config-$version
                cp  arch/i386/boot/bzImage \
                $PKG/boot/kernel-$version ;;
esac
ln -sf kernel-$version $PKG/boot/kernel
cd $PKG/lib/modules/${_version}/
rm -f {build,source}
ln -sv /usr/src/linux-${_version} build
ln -sv /usr/src/linux-${_version} source

# Firmware are in linux-firmware
rm -rf $PKG/lib/firmware
}
